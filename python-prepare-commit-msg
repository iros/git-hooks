#!/bin/bash

# This code is intended to be used as part of a submodule called git-hooks.

# prepare-commit-msg is a shell script that gets called by git with the temp
# filename of the future commit message as its first argument. Its purpose is
# to edit that file in order to make the commit message better/more complete.
#
# It runs code coverage and runs the linter and a bunch of formatters over the
# code, and then appends the output of those tools as comments at the bottom of
# the commit message.  However, it can also be run without a command-line
# argument, just in case you want to see what its output is going to be without
# running "git commit". In that case, we do the same things, but we don't
# append anything to a file.
#
# To make git run this script, softlink this file into the .git/hooks
# directory.  The following command will get that done:
#   ln -s ../../git-hooks/python-prepare-commit-msg .git/hooks/prepare-commit-msg
#
# This module does not run the tests, it just outputs the saved information
# from past test runs. This is okay for the github flow because the tests are
# run in pre-commit, but users of this script in standalone mode should be
# aware that if they don't re-run the unit tests then the coverage stats will
# never change.

COVERAGE=coverage
if [[ -z $(which $COVERAGE) ]]; then
  COVERAGE=python-coverage
fi

PYTHONFILES=$(find . -name \*.py)

(
  echo 'Test coverage is as follows:'
  $COVERAGE report -m
  echo
  echo 'The Python linter found the following issues:'
  pylint --rcfile=git-hooks/pylintrc --reports=n ${PYTHONFILES}
  echo
  echo 'A selection of Python formatters recommend the following changes:'
  echo '  unify :'
  unify ${PYTHONFILES}
  echo '  autoflake :'
  autoflake ${PYTHONFILES}
  echo '  autopep8 --max-line-length 80 -d :'
  autopep8 --max-line-length 80 -d ${PYTHONFILES}
  echo '  docformatter --no-blank --wrap-summaries 80 --wrap-descriptions 80 :'
  docformatter --no-blank --wrap-summaries 80 --wrap-descriptions 80 \
      ${PYTHONFILES}
) | (
  # If a filename argument was passed in, comment all output and append it to
  # that file.  Otherwise just allow the output of the above commands to go to
  # stdout.
  if [[ -n "$1" ]]; then
    sed -e 's/^/# /' >> $1
  else
    cat -
  fi
)
